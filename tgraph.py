import requests
import telegraph
import random
from typing import List, Union
from bs4 import BeautifulSoup
from requests.adapters import HTTPAdapter

import log
import env

logger = log.getLogger('RSStT.tgraph')


class Session(requests.Session):
    def request(self, *args, **kwargs):
        kwargs.setdefault('timeout', (5, 5))
        kwargs.setdefault('proxies', {'all': env.TELEGRAM_PROXY})
        return super().request(*args, **kwargs)


class Telegraph(telegraph.Telegraph):
    def __init__(self, access_token=None):
        self._telegraph = telegraph.api.TelegraphApi(access_token)
        self._telegraph.session = Session()
        self._telegraph.session.mount('https://', HTTPAdapter(max_retries=1))


class API:
    def __init__(self, tokens: Union[str, List[str]]):
        if isinstance(tokens, str):
            tokens = [tokens]
        self._accounts = []
        for token in tokens:
            account = Telegraph(token.strip())
            try:
                account.get_account_info()
                self._accounts.append(account)
            except telegraph.TelegraphException:
                logger.warning('Telegraph API token may be invalid, create one instead.')
                account.create_account(short_name='RSStT', author_name='Generated by RSStT',
                                       author_url='https://github.com/Rongronggg9/RSS-to-Telegram-Bot')
                self._accounts.append(account)
            except Exception as e:
                logger.warning('Cannot set up one of Telegraph accounts: ' + str(e))

    @property
    def valid(self):
        return bool(self._accounts)

    def __getattribute__(self, item):
        if item == '__init__' or item == 'valid' or item == '_accounts':
            return object.__getattribute__(self, item)

        accounts = self._accounts
        if not accounts:
            raise telegraph.TelegraphException('Telegraph token no set!')

        return object.__getattribute__(random.choice(accounts), item)


api = None
if env.TELEGRAPH_TOKEN:
    api = API(env.TELEGRAPH_TOKEN.split(';'))
    if not api.valid:
        logger.error('Cannot set up Telegraph, fallback to non-Telegraph mode.')
        api = None

TELEGRAPH_ALLOWED_TAGS = {
    'a', 'aside', 'b', 'blockquote', 'br', 'code', 'em', 'figcaption', 'figure',
    'h3', 'h4', 'hr', 'i', 'iframe', 'img', 'li', 'ol', 'p', 'pre', 's',
    'strong', 'u', 'ul', 'video'
}


def telegraph_ify(xml: str, title: str = None, link: str = None, feed_title: str = None, author: str = None):
    soup = BeautifulSoup(xml, 'lxml')
    retries = 0

    for tag in soup.find_all(recursive=True):
        if tag.name not in TELEGRAPH_ALLOWED_TAGS:
            tag.replaceWithChildren()

    if feed_title:
        telegraph_author = f"{feed_title}"
        if author and author not in feed_title:
            telegraph_author += f' ({author})'
        telegraph_author_url = link if link else ''
    else:
        telegraph_author = 'Generated by RSStT'
        telegraph_author_url = 'https://github.com/Rongronggg9/RSS-to-Telegram-Bot'

    telegraph_title = f'{title} - {telegraph_author}' if title else 'Generated by RSStT'
    telegraph_html_content = (str(soup) +
                              "<br><br>Generated by "
                              "<a href='https://github.com/Rongronggg9/RSS-to-Telegram-Bot'>RSStT</a>, "
                              "The copyright belongs to the source site." +
                              f"<br><br><a href='{link}'>Source</a>" if link else '')

    telegraph_page = api.create_page(title=telegraph_title[:256], html_content=telegraph_html_content,
                                     author_name=telegraph_author[:128],
                                     author_url=telegraph_author_url[:512])
    telegraph_url = f"https://telegra.ph/{telegraph_page['path']}"
    return telegraph_url
